//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPublisher")]
    public interface IPublisher
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPublisher/SendMessage")]
        void SendMessage(string variableName, int variableValue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPublisher/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string variableName, int variableValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisher/GetVariableNames", ReplyAction="http://tempuri.org/IPublisher/GetVariableNamesResponse")]
        string[] GetVariableNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublisher/GetVariableNames", ReplyAction="http://tempuri.org/IPublisher/GetVariableNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetVariableNamesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IPublisherChannel : ServiceReference.IPublisher, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class PublisherClient : System.ServiceModel.ClientBase<ServiceReference.IPublisher>, ServiceReference.IPublisher
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PublisherClient() : 
                base(PublisherClient.GetDefaultBinding(), PublisherClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPublisher.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublisherClient(EndpointConfiguration endpointConfiguration) : 
                base(PublisherClient.GetBindingForEndpoint(endpointConfiguration), PublisherClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublisherClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PublisherClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublisherClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PublisherClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublisherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void SendMessage(string variableName, int variableValue)
        {
            base.Channel.SendMessage(variableName, variableValue);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string variableName, int variableValue)
        {
            return base.Channel.SendMessageAsync(variableName, variableValue);
        }
        
        public string[] GetVariableNames()
        {
            return base.Channel.GetVariableNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetVariableNamesAsync()
        {
            return base.Channel.GetVariableNamesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPublisher))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPublisher))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:50114/ScadaService.svc/pub");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PublisherClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPublisher);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PublisherClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPublisher);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPublisher,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISubscriber", CallbackContract=typeof(ServiceReference.ISubscriberCallback))]
    public interface ISubscriber
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscriber/InitSub")]
        void InitSub(string panelName, string variableName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscriber/InitSub")]
        System.Threading.Tasks.Task InitSubAsync(string panelName, string variableName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ISubscriberCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscriber/MessageArrived")]
        void MessageArrived(string variableName, int variableValue, string plcAddress, string panelName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ISubscriberChannel : ServiceReference.ISubscriber, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class SubscriberClientBase : System.ServiceModel.DuplexClientBase<ServiceReference.ISubscriber>, ServiceReference.ISubscriber
    {
        
        public SubscriberClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public void InitSub(string panelName, string variableName)
        {
            base.Channel.InitSub(panelName, variableName);
        }
        
        public System.Threading.Tasks.Task InitSubAsync(string panelName, string variableName)
        {
            return base.Channel.InitSubAsync(panelName, variableName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
    }
    
    public class MessageArrivedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public MessageArrivedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string variableName
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public int variableValue
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string plcAddress
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string panelName
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    public partial class SubscriberClient : SubscriberClientBase
    {
        
        public SubscriberClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new SubscriberClientCallback(), binding, remoteAddress)
        {
        }
        
        private SubscriberClient(SubscriberClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<MessageArrivedReceivedEventArgs> MessageArrivedReceived;
        
        private void OnMessageArrivedReceived(object state)
        {
            if ((this.MessageArrivedReceived != null))
            {
                object[] results = ((object[])(state));
                this.MessageArrivedReceived(this, new MessageArrivedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class SubscriberClientCallback : object, ISubscriberCallback
        {
            
            private SubscriberClient proxy;
            
            public void Initialize(SubscriberClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void MessageArrived(string variableName, int variableValue, string plcAddress, string panelName)
            {
                this.proxy.OnMessageArrivedReceived(new object[] {
                            variableName,
                            variableValue,
                            plcAddress,
                            panelName});
            }
        }
    }
}
